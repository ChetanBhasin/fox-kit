use crate::kubernetes_crd::{
    KubernetesCRD, Metadata, Names, ObjectSchema, OpenAPISchema, Properties, Spec, Version,
};
use kube::CustomResource;
use schemars::{JsonSchema, schema_for};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
pub struct FoxServiceStatus {
    replicas: i32,
}

/// Struct corresponding to the Specification (`spec`) part of the `FoxService` resource, directly
/// reflects context of the `foxservices.cbopt.com` CRD.
/// The `FoxService` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "cbopt.com",
    version = "v1",
    kind = "FoxService",
    singular = "foxservice",
    plural = "foxservices",
    derive = "PartialEq",
    status = "FoxServiceStatus",
    namespaced
)]
pub struct FoxServiceSpec {
    /// Name of the service
    pub name: String,
    /// Docker image (including the tag)
    pub image: String,
    /// Replicas of pods to spin up
    pub replicas: i32,
}

impl FoxServiceSpec {
    pub fn kubernetes_crd() -> KubernetesCRD {
        let schema = schema_for!(FoxServiceSpec).schema.into();
        let status_schema = schema_for!(FoxServiceStatus).schema.into();
        KubernetesCRD {
            api_version: "apiextensions.k8s.io/v1".to_string(),
            kind: "CustomResourceDefinition".to_string(),
            metadata: Metadata {
                name: "foxservices.cbopt.com".to_string(),
                namespace: "default".to_string(),
            },
            spec: Spec {
                group: "cbopt.com".to_string(),
                names: Names {
                    kind: "FoxService".to_string(),
                    plural: "foxservices".to_string(),
                    singular: "foxservice".to_string(),
                    short_names: vec!["fs".to_string()],
                },
                scope: "Namespaced".to_string(),
                versions: vec![Version {
                    name: "v1".to_string(),
                    served: true,
                    storage: true,
                    schema: OpenAPISchema {
                        open_apiv3schema: ObjectSchema {
                            type_: "object".to_string(),
                            properties: Properties { spec: schema, status: Some(status_schema) },
                        },
                    },
                }],
            },
        }
    }
}
